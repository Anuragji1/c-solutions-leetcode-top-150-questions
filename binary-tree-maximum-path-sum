**Binary Tree Maximum Path Sum**

Problem Statement 78) A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.

 

Example 1:


Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.
Example 2:


Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.
 

Constraints:

The number of nodes in the tree is in the range [1, 3 * 104].
-1000 <= Node.val <= 1000

--------------------------------------------------------------------------------------------------
SOLUTION = /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

#define MAX(a, b) ((a) > (b) ? (a) : (b))

int maxPathSumInt(struct TreeNode* root, int *max)
{
    if (root == NULL) {
        return 0;
    }
    
    int left = maxPathSumInt(root->left, max);
    int right = maxPathSumInt(root->right, max);
    
    left = MAX(left, 0);
    right = MAX(right, 0);

    // XXX: what about int overflows?
    int curr = left + root->val + right;
    *max = MAX(*max, curr);

    return root->val + MAX(left, right);
}
    

int maxPathSum(struct TreeNode* root)
{
    int max = INT_MIN;
    maxPathSumInt(root, &max);
    return max;
}

---------Explanation :-
maxPathSumInt function:

Purpose: Recursively calculates the maximum path sum starting from a given node, considering paths that can go down and back up the tree.
Arguments:
root: Pointer to the current node.
max: Pointer to a global variable to store the maximum path sum found so far.
Base case:
If root is NULL, it returns 0, as there's no path from an empty node.
Recursive calls:
Calculates the maximum path sums for the left and right subtrees recursively: left = maxPathSumInt(root->left, max) and right = maxPathSumInt(root->right, max).
Considering negative path sums:
Sets both left and right to 0 if they are negative, ensuring non-negative contributions to the path sum.
Potential path through the root:
Calculates curr = left + root->val + right, representing a potential path that includes the current node and values from both subtrees.
Updates the global max value if curr is greater.
Maximum path starting from current node:
Returns root->val + MAX(left, right), which is the maximum path sum starting from the current node and going down either the left or right subtree.
2. maxPathSum function:

Purpose: Finds the maximum path sum in the entire tree.
Steps:
Initializes max to INT_MIN to accommodate potential negative values.
Calls maxPathSumInt with the root node and a pointer to max.
Returns the final max value, which holds the maximum path sum found during the recursive process.
Key points:

The code uses a recursive approach to explore all possible paths and track the maximum sum.
It considers both downward and upward paths, allowing for flexible path combinations.
It handles negative path sums by ensuring non-negative contributions.
The time complexity is O(n), visiting each node once.
The space complexity is O(h) due to the recursion stack.
Potential issue:

Integer overflow: The code doesn't explicitly handle integer overflows that might occur during addition, especially for large trees with positive values. This could lead to incorrect results.
