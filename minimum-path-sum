**Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 200

---------------------------------------------------------------------
SOLUTION = #include <limits.h>

int minPathSum(int** grid, int gridSize, int* gridColSize) {
    int m = gridSize, n = gridColSize[0];
    int dp[m][n];

    // Initialize the first row and column with cumulative sums
    for (int i = 0; i < m; i++) {
        dp[i][0] = grid[i][0] + (i > 0 ? dp[i - 1][0] : 0);
    }
    for (int j = 0; j < n; j++) {
        dp[0][j] = grid[0][j] + (j > 0 ? dp[0][j - 1] : 0);
    }

    // Fill the remaining cells using dynamic programming
    for (int i = 1; i < m; i++) {
        for (int j = 1; j < n; j++) {
            dp[i][j] = grid[i][j] + fmin(dp[i - 1][j], dp[i][j - 1]);
        }
    }

    return dp[m - 1][n - 1]; // Minimum path sum is at the bottom-right corner
}

----Explanation :- 
Grid Dimensions and DP Array:

The code starts by retrieving the number of rows (m) from gridSize and the number of columns (n) from the first element of gridColSize.
It declares a 2D integer array dp of size m x n to store the minimum sum to reach each cell in the grid.
Base Case Initialization (First Row and Column):

It uses two for loops to initialize the first row (i = 0) and the first column (j = 0) of the dp array.
For the first row (i = 0), the minimum sum to reach each cell is simply the cumulative sum of the grid values in that row. It considers the value of the current cell (grid[i][0]) and adds the minimum sum to reach the cell above it in the same column (if i > 0). This is because you can only move down from the previous row.
Similarly, for the first column (j = 0), the minimum sum to reach each cell is the cumulative sum of the grid values in that column. It considers the value of the current cell (grid[0][j]) and adds the minimum sum to reach the cell to the left in the same row (if j > 0). This is because you can only move right from the previous column.
Dynamic Programming Calculation:

The core logic utilizes nested for loops to iteratively fill the remaining cells in the dp array:
The outer loop (i) iterates from row 1 (i = 1) to the last row (i < m).
The inner loop (j) iterates from column 1 (j = 1) to the last column (j < n).
Inside the loops, for each cell dp[i][j], the code calculates the minimum sum to reach that cell. It considers two possible paths:
The path coming down from the cell above (dp[i-1][j]).
The path coming right from the cell to the left (dp[i][j-1]).
It uses the fmin function (assumed to be a function that returns the minimum of two values) to find the smaller of these two possible minimum sums.
The minimum sum to reach the current cell dp[i][j] is then calculated by adding the value of the current grid cell (grid[i][j]) to the smaller minimum sum obtained from the two possible paths. This ensures that dp[i][j] always holds the minimum total sum to reach that cell considering all valid paths from the top-left corner.
Return the Minimum Sum:

After iterating through all cells, the dp array will contain the minimum sum to reach each cell in the grid. The minimum sum for the entire path from the top-left corner to the bottom-right corner will be stored in dp[m - 1][n - 1]. So, the function returns this value, representing the minimum sum of all elements in the grid along the allowed path.
